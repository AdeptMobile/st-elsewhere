=== St. Elsewhere

An ActiveRecord association proxy to support relationships across different databases

http://emphaticsolutions.com/images/st.elsewhere.jpg

=== The Scenario

For a variety of reasons, you might find yourself supporting multiple databases in your Rails application.  Maybe you're connecting to a legacy database for a few models.  Perhaps you have divided your Rails application in two, one database for your online catalog system and another for transactional data.  Multiple database connections in Rails is {nothing new.}[http://www.google.com/search?hl=en&source=hp&q=multiple+database+connections+rails&aq=f&oq=&aqi=g4]

=== The Problem

While there may be great benefits to connecting to multiple databases in your app, there are also costs.  One specific case does not work.
<b><tt>has_many :children, :through => parent_children</tt></b> does not work.

You'll encounter one of two errors, depending on your setup:
* If the schemas are different, you'll see something like: <tt>ActiveRecord::StatementInvalid: Mysql::Error: Table 'appname_transactional.parent_children' doesn't exist</tt>
* If the schemas are the same but data only exists in one schema or the other, you'll just get empty relationships.

=== The Solution

St. Elsewhere is an ActiveRecord plugin that adds a new class method to support basic association methods across different database connections.

Example:

  class Hospital < AcitveRecord::Base
    has_many :hospital_doctors
    has_many_elsewhere :doctors, :through => :hospital_doctors
  end

  class HospitalDoctor < ActiveRecord::Base
    belongs_to :hospital
    belongs_to :doctor
  end

  class TransactionalBase < ActiveRecord::Base
    self.abstract_class = true
    establish_connection "#{RAILS_ENV}-transactional"
  end

  class Doctor < TransactionalBase
    has_many :hospital_doctors
    has_many :hospitals, :through => :hospital_doctors
  end

